{"version":3,"sources":["../../src/controllers/WhatsAppBotController.js"],"names":["dotenv","config","SID","accountSid","KEY","TwilioAuthToken","APIKEY","googleApiKey","CX","cx","APP_ENV","environment","process","env","action_feedbacks","feedback","count","active_intent","MessagingResponse","twilio","twiml","getFeedback","keyword","phone","response","message","welcomeText","initial_intent","i","feedbacks","length","sub","filter","f","keywords","includes","toLowerCase","console","log","initial_action","getActionFeedback","_feedback","action","q","session_hash","Array","isArray","fb","actionService","previous_action","next_action","WhatsAppBot","googleSearch","req","res","next","body","Body","From","replace","options","auth","session","intent","defaultMessage","set","status","send","toString","error"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\nimport twilio from 'twilio';\nimport feedbacks from '../messages/feedbacks';\nimport defaultMessage from '../messages/default';\nimport { updateSessionCurrentAction, updateSessionNextAction, getUserSession, endSession } from '../models/Session';\nimport { welcomeText } from '../messages/messageTexts';\nimport initializeSession from '../actions/initializeSession';\n\ndotenv.config();\n\nconst { \n    SID: accountSid,\n    KEY: TwilioAuthToken,\n    APIKEY: googleApiKey,\n    CX: cx,\n    APP_ENV: environment,\n} = process.env;\n\n// var next_action;\nvar action_feedbacks;\nvar feedback;\nvar count;\nvar active_intent = '';\n\ntwilio(accountSid, TwilioAuthToken);\nconst { MessagingResponse } = twilio.twiml;\n\n\nfunction getFeedback(keyword, phone) {\n    let response = {\n        message: `Sorry, we could not catch that. \\n\\n${welcomeText}`,\n        initial_intent: 'welcome',\n    };\n\n    // console.log({active_intent});\n\n    for(let i = 0; i <= feedbacks.length; i++) {\n        let feedback = feedbacks[i];\n        // console.log(feedback);\n    // feedbacks.forEach((feedback) => {\n        if(active_intent == 'loan' && feedback.sub && feedback.sub.length > 0) {\n            let sub = feedback.sub.filter((f) => {\n                // console.log(f.keywords.includes(keyword.toLowerCase()), f.keywords)\n                return f.keywords.includes(keyword.toLowerCase())\n            })[0];\n            if(sub) {\n                response = sub;\n            }\n            break;\n            // return;\n        } else {\n            if(feedback && feedback.keywords.includes(keyword.toLowerCase())) {\n                // console.log('checking here tooo?')\n                response = feedback;\n                break;\n                // return;\n            } \n        }\n    }\n    //)\n    console.log({response})\n    if(response.initial_intent) {\n        //update with the current initial intent\n        active_intent = response.initial_intent;\n    }\n\n    if(response.initial_action) {\n        response.initial_action(phone)\n    }\n\n\n    return response;\n    // return response ? response.message : defaultMessage;\n}\n\n\nfunction getActionFeedback(_feedback, action, q, phone, session_hash) {\n    console.log({_feedback})\n//    console.log('checking oooo', _feedback, next_action, action, last_opt);\n\n    // console.log('action', action, count,last_opt)\n\n    let response;\n\n    if(_feedback.action && Array.isArray(_feedback.action)) {\n         response = _feedback.action.filter(\n                (fb) => {\n                    // let ac = fb.action ? fb.action : fb;\n                    // console.log({ac}, action);\n                    // console.log('act=>', ac == action && action)\n                return fb.action == action;\n                }\n            )[0];\n\n    } else {\n        response = _feedback.filter((fb) => fb.action == action)[0];\n        // console.log(response, 'action');\n    }\n\n    if(response.actionService) {\n        console.log(response)\n        response.actionService(phone, response.previous_action, response.next_action, q, session_hash);\n    }\n\n    updateSessionCurrentAction(phone, response.action);\n    updateSessionNextAction(phone, response.next_action);\n\n    // console.log('action_response', response);\n    // console.log('new resp', q, next_action, response)\n    return response\n    // next_action = response.next_action\n\n}\n\n\nclass WhatsAppBot {\n\n    static async googleSearch(req, res, next) {\n        console.log(req.body);\n        const twiml = new MessagingResponse();\n        const q = req.body.Body;\n        const phone = req.body.From ? req.body.From.replace('whatsapp:', '') : null;\n        const options = { cx, q, auth: googleApiKey}\n\n        try {\n            let response;\n            let feedback;\n            let next_action;\n            \n            let session = await getUserSession(phone);\n\n            if(!session || !action_feedbacks) {\n                await endSession(phone); //end previous sessions\n                await initializeSession(phone);\n                session = await getUserSession(phone);\n                console.log('new session');\n            }\n\n            console.log({session})\n            if(session.next_action || session.next_action !== 'undefined') {\n                next_action = session.next_action;                \n            }\n\n            console.log({next_action});\n\n\n            if(next_action) {\n                feedback = getActionFeedback(action_feedbacks, next_action, q, phone, session.session_hash);\n                console.log({feedback});\n                // next_action = feedback.next_action;\n                updateSessionNextAction(feedback.next_action);\n    \n            } else {                \n                feedback = getFeedback(q, phone);\n                // console.log({feedback})\n\n                if(feedback.action) {\n                    action_feedbacks = feedback.action;\n                }\n            }\n\n\n\n            if(feedback.intent) {\n                response = getActionFeedback(feedback, feedback.intent, q, phone, session.session_hash);\n                // next_action = response.next_action\n                 updateSessionNextAction(feedback.next_action);\n                // console.log({response});\n            } else {\n                response = feedback;\n                // console.log('backup response', response.message)\n            }\n\n\n            let message = `${response ? response.message : defaultMessage}`;\n\n            count++;\n\n            if(environment == 'production') {\n               twiml.message(`${message}`);\n     \n               console.log(message);\n               res.set('Content-Type', 'text/xml');\n               return res.status(200).send(twiml.toString());\n            } else {\n                res.set('Content-Type', 'application/json');\n                return res.status(200).send({message});\n            }\n\n            // let next_action = getUserSession(phone).next_action;\n\n\n            // console.log({next_action});\n            \n\n        } catch(error) {\n            console.log({error})\n            return next(error);\n        }\n    }\n\n\n}\n\nexport default WhatsAppBot;"],"file":"WhatsAppBotController.js"}