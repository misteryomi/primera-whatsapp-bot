{"version":3,"sources":["../src/index.js"],"names":["app","PORT","process","env","use","bodyParser","urlencoded","extended","json","v1Routes","webRoutes","engine","set","__dirname","express","static","req","res","next","err","Error","status","errors","message","listen","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,GAAG,GAAG,uBAAZ;AACA,IAAMC,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYF,IAAZ,IAAoB,IAAjC,C,CAGA;;AAEAD,GAAG,CAACI,GAAJ,CAAQ,oBAAR;AACAJ,GAAG,CAACI,GAAJ,CAAQC,oBAAWC,UAAX,CAAsB;AAACC,EAAAA,QAAQ,EAAE;AAAX,CAAtB,CAAR;AACAP,GAAG,CAACI,GAAJ,CAAQC,oBAAWG,IAAX,EAAR;AACAR,GAAG,CAACI,GAAJ,CAAQK,gBAAR;AACAT,GAAG,CAACI,GAAJ,CAAQM,iBAAR;AAEAV,GAAG,CAACW,MAAJ,CAAW,MAAX,EAAmB,+BAAnB;AACAX,GAAG,CAACY,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAZ,GAAG,CAACY,GAAJ,CAAQ,OAAR,EAAiBC,SAAS,GAAG,WAA7B;AACAb,GAAG,CAACI,GAAJ,CAAQU,iBAAQC,MAAR,CAAe,SAAf,CAAR,E,CAGA;;AACAf,GAAG,CAACI,GAAJ,CAAQ,CAACY,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACxB,MAAMC,GAAG,GAAG,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,EAAAA,GAAG,CAACE,MAAJ,GAAa,GAAb;AACAH,EAAAA,IAAI,CAACC,GAAD,CAAJ;AACH,CAJD;AAMAnB,GAAG,CAACI,GAAJ,CAAQ,CAACe,GAAD,EAAMH,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;AAC7BD,EAAAA,GAAG,CAACI,MAAJ,CAAWF,GAAG,CAACE,MAAJ,IAAc,GAAzB,EAA8Bb,IAA9B,CAAmC;AAC/Bc,IAAAA,MAAM,EAAE;AACJC,MAAAA,OAAO,EAAEJ,GAAG,CAACI;AADT;AADuB,GAAnC;AAKH,CAND;AAQAvB,GAAG,CAACwB,MAAJ,CAAWvB,IAAX,EAAiB,MAAMwB,OAAO,CAACC,GAAR,iCAAqCzB,IAArC,EAAvB;eAEeD,G","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport cors from 'cors';\nimport { v1Routes, webRoutes } from './routes';\nimport mustacheExpress from 'mustache-express';\nimport db from './db';\n\nconst app = express();\nconst PORT = process.env.PORT || 3005;\n\n\n// global.db = db;\n\napp.use(cors());\napp.use(bodyParser.urlencoded({extended: false}));\napp.use(bodyParser.json());\napp.use(v1Routes);\napp.use(webRoutes);\n\napp.engine('html', mustacheExpress())\napp.set('view engine', 'html');\napp.set('views', __dirname + '/../views');\napp.use(express.static('/public'));\n\n\n//404 error handler\napp.use((req, res, next) => {\n    const err = new Error('Not found');\n    err.status = 404;\n    next(err);\n})\n\napp.use((err, req, res, next) => {\n    res.status(err.status || 500).json({\n        errors: {\n            message: err.message\n        }\n    })\n})\n\napp.listen(PORT, () => console.log(`App listening on port ${PORT}`))\n\nexport default app;"],"file":"index.js"}